import os
import sqlite3
from app import create_app, db
from app.models import User

# Create an instance of the app
app = create_app()

def migrate_health_data():
    """
    This script migrates the database to include the user_id column in the health_data table.
    It assigns existing health data to the first user in the database.
    """
    db_path = 'instance/health_tracker.sqlite'
    
    # Check if database exists
    if not os.path.exists(db_path):
        print(f"Database file not found at {db_path}")
        return
    
    # Backup the database first
    try:
        from shutil import copyfile
        backup_path = f"{db_path}.backup"
        copyfile(db_path, backup_path)
        print(f"Database backup created at {backup_path}")
    except Exception as e:
        print(f"Warning: Could not create backup: {e}")
        return
    
    try:
        # Connect to database
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Check if the user_id column already exists
        cursor.execute("PRAGMA table_info(health_data)")
        columns = cursor.fetchall()
        columns_dict = {col[1]: col for col in columns}
        
        if 'user_id' not in columns_dict:
            print("Adding user_id column to health_data table...")
            
            # Add user_id column
            cursor.execute("ALTER TABLE health_data ADD COLUMN user_id INTEGER")
            
            # Get the first user (assuming the first user is the one to assign existing data to)
            with app.app_context():
                first_user = User.query.first()
                if not first_user:
                    print("No users found in the database. Please register a user first.")
                    return
                user_id = first_user.id
            
            # Update existing health data with the user_id
            cursor.execute("UPDATE health_data SET user_id = ?", (user_id,))
            conn.commit()
            print("Migration completed successfully!")
        
        else:
            print("Database already has the user_id column. No migration needed.")
            
    except Exception as e:
        conn.rollback()
        print(f"Error during migration: {e}")
        print("The database was not modified. Your data is safe.")
    finally:
        conn.close()

if __name__ == "__main__":
    # Run the migration
    migrate_health_data()
    print("Database migration script completed.")

# Generated by Copilot