"""
Configuration settings for the health tracker application
"""
import os
from dotenv import load_dotenv

class ConfigurationManager:
    """
    Configuration manager class for the application
    """
    def __init__(self):
        # Load environment variables from .env file if it exists
        load_dotenv()
        
        # Get the base directory of the application
        self.basedir = os.path.abspath(os.path.dirname(__file__))
        self.instance_path = os.path.join(self.basedir, 'instance')

        # Ensure instance directory exists
        if not os.path.exists(self.instance_path):
            os.makedirs(self.instance_path)

class BaseConfig:
    """Base configuration class"""
    def __init__(self):
        self.config_manager = ConfigurationManager()
        
    @property
    def SECRET_KEY(self):
        """Get secret key for session management"""
        return os.environ.get('SECRET_KEY') or 'health-tracker-default-key'
    
    @property
    def SQLALCHEMY_DATABASE_URI(self):
        """Get database URI"""
        return os.environ.get('DATABASE_URL') or \
            f'sqlite:///{os.path.join(self.config_manager.instance_path, "health_tracker.sqlite")}'
    
    @property
    def SQLALCHEMY_TRACK_MODIFICATIONS(self):
        """SQLAlchemy track modifications setting"""
        return False

class DevelopmentConfig(BaseConfig):
    """Development configuration class"""
    DEBUG = True
    TESTING = False

class ProductionConfig(BaseConfig):
    """Production configuration class"""
    DEBUG = False
    TESTING = False
    
    @property
    def SECRET_KEY(self):
        """Get secret key for production"""
        key = os.environ.get('SECRET_KEY')
        if not key:
            raise ValueError("SECRET_KEY environment variable is required in production")
        return key

class TestingConfig(BaseConfig):
    """Testing configuration class"""
    DEBUG = True
    TESTING = True
    
    @property
    def SQLALCHEMY_DATABASE_URI(self):
        """Get test database URI"""
        return 'sqlite:///:memory:'

# Configuration dictionary
config = {
    'development': DevelopmentConfig,
    'production': ProductionConfig,
    'testing': TestingConfig,
    'default': DevelopmentConfig
}

def get_config():
    """
    Get current configuration based on environment
    
    Returns:
        Config class based on current environment
    """
    env = os.environ.get('FLASK_ENV', 'default')
    return config[env]()

# Generated by Copilot