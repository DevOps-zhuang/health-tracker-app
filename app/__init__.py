"""
Flask application factory module
"""
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
from config import get_config
import logging
import os
from logging.handlers import RotatingFileHandler

# Initialize extensions
db = SQLAlchemy()
login_manager = LoginManager()

class ApplicationFactory:
    """
    Application factory class for creating Flask application instances
    """
    @staticmethod
    def create_app(config_class=None):
        """
        Create and configure the Flask application
        
        Args:
            config_class: Configuration class (default: None, will use get_config())
            
        Returns:
            Flask application instance
        """
        # Create Flask app instance
        app = Flask(__name__)
        
        # Load configuration
        config = config_class() if config_class else get_config()
        app.config.from_object(config)
        
        # Ensure instance folder exists
        try:
            os.makedirs(app.instance_path)
        except OSError:
            pass
            
        # Initialize database
        db.init_app(app)
        
        # Initialize login manager
        login_manager.init_app(app)
        login_manager.login_view = 'auth.login'
        login_manager.login_message = 'Please log in to access this page.'
        
        # Set up logging
        if not app.debug and not app.testing:
            # Create logs directory if it doesn't exist
            if not os.path.exists('logs'):
                os.mkdir('logs')
            
            # Set up file handler
            file_handler = RotatingFileHandler(
                'logs/health_tracker.log',
                maxBytes=10240,
                backupCount=10
            )
            file_handler.setFormatter(logging.Formatter(
                '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'
            ))
            file_handler.setLevel(logging.INFO)
            
            # Set up app logger
            app.logger.addHandler(file_handler)
            app.logger.setLevel(logging.INFO)
            app.logger.info('Health Tracker startup')
        
        # Register blueprints
        from app.routes import main
        from app.auth import auth
        app.register_blueprint(main)
        app.register_blueprint(auth)
        
        @app.route('/health')
        def health_check():
            """Health check endpoint for container orchestration"""
            return {'status': 'healthy'}, 200
        
        return app

# Create application factory instance
app_factory = ApplicationFactory()

# Factory function for creating application
def create_app(config_class=None):
    """
    Factory function to create Flask application
    
    Args:
        config_class: Configuration class (default: None)
        
    Returns:
        Flask application instance
    """
    return app_factory.create_app(config_class)

# Generated by Copilot